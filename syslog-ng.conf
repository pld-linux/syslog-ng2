#
# Syslog-ng example configuration for PLD Linux
#
# Copyright (c) 1999 anonymous
# Copyright (c) 1999 Balazs Scheidler
# $Id$
#
# Syslog-ng configuration file, compatible with default PLD syslogd
# installation. 
#

options { long_hostnames(off); sync(0); };

source src	{ pipe ("/proc/kmsg" log_prefix("kernel: ")); unix-stream("/dev/log"); internal(); };
# uncomment the line below if you want to setup syslog server
#source net	{ udp(); };

#destination loghost	{ udp("loghost" port(999)); };

destination kern	{ file("/var/log/kernel"); };
destination messages	{ file("/var/log/messages"); };
destination authlog	{ file("/var/log/secure"); };
destination mail	{ file("/var/log/maillog"); };
destination uucp	{ file("/var/log/spooler"); };

destination debug	{ file("/var/log/debug"); };
destination console	{ usertty("root"); };
#destination console_all	{ file("/dev/tty12"); };

destination xconsole	{ pipe("/dev/xconsole"); };

#destination mailinfo	{ file("/var/log/mail/info"); };
#destination mailwarn	{ file("/var/log/mail/warn"); };
#destination mailerr	{ file("/var/log/mail/err"); };

destination newscrit	{ file("/var/log/news/news.crit" owner(news) group(news)); };
destination newserr	{ file("/var/log/news/news.err" owner(news) group(news)); };
destination newsnotice	{ file("/var/log/news/news.notice" owner(news) group(news)); };

destination cron	{ file("/var/log/cron" owner(root) group(crontab) perm(0660)); };
destination syslog	{ file("/var/log/syslog"); };
destination daemon	{ file("/var/log/daemon"); };
destination lpr		{ file("/var/log/lpr"); };
destination user	{ file("/var/log/user"); };
destination ppp		{ file("/var/log/ppp"); };
destination ftp		{ file("/var/log/xferlog"); };

# Log iptables messages to separate file
destination iptables	{ file("/var/log/iptables"); };

filter f_auth		{ facility(auth); };
filter f_authpriv	{ facility(auth, authpriv); };
filter f_syslog		{ not facility(authpriv, cron, lpr, mail, news); };
filter f_cron		{ facility(cron); };
filter f_daemon		{ facility(daemon); };
filter f_kern		{ facility(kern); };
filter f_lpr		{ facility(lpr); };
filter f_mail		{ facility(mail); };
filter f_user		{ facility(user); };
filter f_uucp		{ facility(uucp); };
filter f_ppp		{ facility(daemon) and program(pppd) or program(chat); };
filter f_news		{ facility(news); };
filter f_ftp		{ facility(ftp); };
filter f_messages	{ level(info..warn) 
			and not facility(auth, authpriv, cron, lpr, mail, news, daemon); };

filter p_debug		{ level(debug); };
filter p_info		{ level(info); };
filter p_notice		{ level(notice); };
filter p_warn		{ level(warn); };
filter p_err		{ level(err); };
filter p_alert		{ level(alert); };
filter p_crit		{ level(crit); };
filter p_emergency	{ level(emerg); };

filter f_iptables	{ facility(kern) and match("IN=[A-Za-z0-9]* OUT=[A-Za-z0-9]*"); };

log { source(src); filter(f_kern);	destination(kern); };

log { source(src); filter(f_authpriv);	destination(authlog); };
log { source(src); filter(f_syslog);	destination(syslog); };
log { source(src); filter(f_cron);	destination(cron); };
log { source(src); filter(f_daemon);	destination(daemon); };
log { source(src); filter(f_lpr);	destination(lpr); };
log { source(src); filter(f_user);	destination(user); };
log { source(src); filter(f_uucp);	destination(uucp); };
log { source(src); filter(f_messages);	destination(messages); };
log { source(src); filter(f_ppp);	destination(ppp); };
log { source(src); filter(p_debug);	destination(debug); };
log { source(src); filter(p_emergency);	destination(console); };
#log { source(src); destination(console_all); };

log { source(src); filter(f_mail);			destination(mail); };
#log { source(src); filter(f_mail); filter(p_info);	destination(mailinfo); };
#log { source(src); filter(f_mail); filter(p_warn);	destination(mailwarn); };
#log { source(src); filter(f_mail); filter(p_err);	destination(mailerr); };

log { source(src); filter(f_news); filter(p_crit);	destination(uucp); };
log { source(src); filter(f_news); filter(p_crit);	destination(newscrit); };
log { source(src); filter(f_news); filter(p_err);	destination(newserr); };
log { source(src); filter(f_news); filter(p_warn);	destination(newsnotice); };
log { source(src); filter(f_news); filter(p_notice);	destination(newsnotice); };
log { source(src); filter(f_news); filter(p_info);	destination(newsnotice); };
log { source(src); filter(f_news); filter(p_debug);	destination(newsnotice); };
log { source(src); filter(f_ftp);			destination(ftp); };

#log { source(src); filter(f_iptables);	destination(iptables); };

#  This is a catchall statement, and should catch all messages which were not
#  accepted any of the previous statements.  
#log { source(src); filter(DEFAULT); destination(syslog); };
